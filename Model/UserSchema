const mongooose = require('mongoose');
const bcrypt = require('bcrypt');
const joi = require('joi');
const CustomError = require('../Errors');

const UserScheme = new mongooose.Schema(
  {
    firstName: {
      type: String,
      trim: true,
      minlength: 1,
      maxlength: 30,
      required: [true, 'Firstname is mandatory'],
    },
    lastName: {
      type: String,
      trim: true,
      minlength: 1,
      maxlength: 30,
      required: [true, 'Lastname is mandatory'],
    },

    email: {
      type: String,
      unique: true,
      minlength: 1,
      maxlength: 55,
      required: [true, 'Email is mandatory'],
    },
    password: {
      type: String,
      required: [true, 'Password is mandatory'],
      min: 8,
      max: 60,
    },
    carType: {
      type: String,
      required: [true, 'Car type is mandatory'],
      enum: ['Convertible', 'SUV', 'TRUCK', 'Minivan', 'OTHER'],
      default: 'Convertible',
    },
    zipCode: {
      type: String,
      required: [true, 'Zip code is mandatory'],
      trim: true,
    },
    city: {
      type: String,
      required: [true, 'City is mandatory'],
      trim: true,
      maxlength: 20,
    },
    country: {
      type: String,
      required: [true, 'Country is mandatory'],
      trim: true,
      maxlength: 20,
    },
  },
  { timestamps: true }
);

UserScheme.pre('save', async function (next) {
  const saltRounds = 10;
  const salt = await bcrypt.genSalt(saltRounds);
  this.password = await bcrypt.hash(this.password, salt);
});

UserScheme.statics.login = async function (email, password) {
  const user = await this.findOne({ email });

  if (user) {
    const auth = await bcrypt.compare(password, user.password);

    if (auth) {
      return user;
    }

    throw new CustomError.AuthenticationError('invalid password, try again.');
  }

  throw new CustomError.AuthenticationError('invalid email try again.');
};

UserScheme.recovery = async function (email) {
  const user = await this.findOne({ email });

  if (user) {
    console.log('exists');
  } else {
    console.log('invalid email');
  }
};

UserScheme.methods.compare = async (password) => {
  const comparePassword = await bcrypt.compare(password, this.password);
  return comparePassword;
};

module.exports = mongooose.model('Users', UserScheme);
